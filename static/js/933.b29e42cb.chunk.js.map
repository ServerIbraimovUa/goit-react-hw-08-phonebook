{"version":3,"file":"static/js/933.b29e42cb.chunk.js","mappings":"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","sources":["components/App.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx","redux/auth/authSelectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 900px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0 15px;\n  .title {\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.2em;\n    margin-top: 1em;\n  }\n`;\n\nexport const DivStyle = styled.div`\n  font-size: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5em;\n  margin-top: 2em;\n`;\n","import styled from 'styled-components';\n\nexport const FormStyle = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 1em auto;\n  gap: 1em;\n  width: 400px;\n  label {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 0.1em;\n  }\n  span {\n    margin-left: 0.5em;\n  }\n\n  input {\n    border: none;\n    padding: 0.3em 0.5em;\n    border-radius: 1em;\n  }\n\n  button {\n    width: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.1em;\n    padding: 0.3em 0.3em;\n    border: none;\n    border-radius: 1em;\n    background-color: #53cccc;\n    &:hover,\n    &:focus {\n      scale: 1.1;\n    }\n  }\n`;\n","import { RiCalendarCheckLine } from 'react-icons/ri';\nimport * as yup from 'yup';\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/Contacts/contactsOperetions';\nimport { useForm } from 'react-hook-form';\nimport { FormStyle } from './ContactForm.styled';\nimport { Container } from 'components/App.styled';\n\nconst schema = yup\n  .object({\n    name: yup.string().min(4).max(32).required(),\n    number: yup.string().min(6).max(16).required(),\n  })\n  .required();\n\nexport default function ContactForm() {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  const { items } = useSelector(state => state.contacts);\n\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    if (items.find(({ name }) => name === data.name)) {\n      alert(`${data.name} is already in contacts`);\n      reset();\n      return;\n    }\n\n    dispatch(addContact(data));\n\n    reset();\n  };\n\n  return (\n    <Container>\n      <FormStyle onSubmit={handleSubmit(onSubmit)}>\n        <label>\n          <span>Contact name</span>\n          <input\n            type=\"text\"\n            placeholder=\"Jacob Mercer\"\n            {...register('name', { required: true })}\n          />\n          <span>{errors.name?.message}</span>\n        </label>\n        <label>\n          <span>Number</span>\n          <input type=\"text\" placeholder=\"761-23-96\" {...register('number')} />\n          <span>{errors.number?.message}</span>\n        </label>\n        <button type=\"submit\">\n          Add\n          <RiCalendarCheckLine />\n        </button>\n      </FormStyle>\n    </Container>\n  );\n}\n","import Loading from 'components/Loading/Loading';\nimport { RiDeleteBin6Line } from 'react-icons/ri';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/Contacts/contactsOperetions';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(state => state.contacts);\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <li>\n          <span>{name}:</span>\n          <span>{number}</span>\n          <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            <RiDeleteBin6Line />\n          </button>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default ContactItem;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  font-size: 24px;\n  gap: 12px;\n  margin-top: 1em;\n\n  li {\n    padding: 0.4em 1em;\n    display: flex;\n    align-items: center;\n    border: 1px solid #000;\n    border-radius: 30px;\n    box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px,\n      rgba(0, 0, 0, 0.22) 0px 15px 12px;\n  }\n  span + span {\n    margin-left: 14px;\n  }\n  button {\n    display: flex;\n    justify-content: end;\n    align-items: center;\n    margin-left: auto;\n    width: 40px;\n    height: 40px;\n    background-color: transparent;\n    border: 2px solid #d60101;\n    border-radius: 50%;\n    cursor: pointer;\n    font-size: 26px;\n    color: #d60101;\n    transition: all 0.3s ease-in-out;\n    &:hover,\n    &:focus {\n      background-color: #d60101;\n      color: white;\n      box-shadow: 0px 0px 10px 5px rgba(255, 0, 0, 0.4);\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 6px 12px;\n  background-color: transparent;\n  border: 1px solid black;\n  border-radius: 1em;\n  &::placeholder {\n    color: black;\n    font-size: 16px;\n  }\n`;\n","import { Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/Contacts/contactFilter';\n\nconst Filter = () => {\n  const { filter } = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Input\n        placeholder=\"Search name\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useSelector } from 'react-redux';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\nimport { Container } from 'components/App.styled';\nimport { selectIsLoggedIn } from 'redux/auth/authSelectors';\nimport Filter from 'components/Filter/Filter';\nimport { Navigate } from 'react-router-dom';\n\nconst ContactList = () => {\n  const { items } = useSelector(state => state.contacts);\n  const { filter } = useSelector(state => state.filter);\n  const isLogedIn = useSelector(selectIsLoggedIn);\n  const getFilterContacts = () => {\n    if (filter === '') return items;\n\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filteredContacts = getFilterContacts();\n\n  return (\n    <Container>\n      {isLogedIn ? (\n        <>\n          {filteredContacts.length === 0 ? <h2>Empty...</h2> : <Filter />}\n          <List>\n            {filteredContacts.map(({ name, id, number }) => {\n              return (\n                <ContactItem key={id} name={name} id={id} number={number} />\n              );\n            })}\n          </List>\n        </>\n      ) : (\n        <Navigate to=\"/login\" replace />\n      )}\n    </Container>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/Contacts/contactsOperetions';\nimport { selectIsLoggedIn } from 'redux/auth/authSelectors';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLogedIn = useSelector(selectIsLoggedIn);\n\n  useEffect(() => {\n    if (isLogedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLogedIn]);\n\n  return (\n    <>\n      {isLogedIn && <ContactForm />}\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n","export const selectIsLoggedIn = state => state.auth.isLoggedIn;\nexport const selectLoading = state => state.auth.isLoading;\nexport const selectError = state => state.auth.error;\n\nexport const selectUser = state => state.auth.user;\n\nexport const selectIsRefreshing = state => state.auth.isRefreshing;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","DivStyle","_templateObject2","FormStyle","schema","yup","name","min","max","required","number","ContactForm","_errors$name","_errors$number","_useForm","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","items","useSelector","state","contacts","dispatch","useDispatch","_jsx","children","_jsxs","onSubmit","data","find","_ref","alert","concat","addContact","_objectSpread","type","placeholder","message","RiCalendarCheckLine","id","isLoading","_Fragment","Loading","onClick","deleteContact","RiDeleteBin6Line","List","Input","filter","value","onChange","e","setFilter","target","isLogedIn","selectIsLoggedIn","filteredContacts","toLowerCase","includes","length","Filter","map","_ref2","ContactItem","Navigate","to","replace","useEffect","fetchContacts","ContactList","auth","isLoggedIn","selectLoading","selectError","error","selectUser","user"],"sourceRoot":""}